#+TITLE: Chu's Literate DOOM GNU Emacs Configuration
#+AUTHOR: Chu the Pup
#+DESCRIPTION: Chu's Literate Doom GNU Emacs configuration
#+PROPERTY: header-args :tangle yes
#+auto-tangle: t
#+startup: content

* Org Mode Literate Config (config.org) file

** Preamble

Here's the deets:

*** Org-mode babel tangle setup

There is a property defined on at the top of this file:

#+begin_example elisp
header-args :tangle yes
#+end_example

This tells Emacs to automatically tangle (include) all code blocks in this file when generating the code for the config file (~config.el~), unless the code block explicitly includes `:tangle no` as the above code block does (or if it is a quote or example block).

*** Usage of quote and example blocks

This is done in order to debug the configuration on my end. However, the use of quote and example blocks also serves as a way of offering an on/off switch to certain blocks of "settings" (blocks beginning in "#+begin_something" and ending in "#+end_something").

** DOOM Emacs stuff

#+begin_src elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

Doom exposes five (optional) variables for controlling fonts in Doom. Here are the three important ones:

+ `doom-font'

+ `doom-variable-pitch-font'

+ `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string. You generally only need these two:

#+begin_example
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
#+end_example

#+begin_example
(setq doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_example

There are two ways to load a theme. Both assume the theme is installed and available. You can either set `doom-theme' or manually load a theme with the `load-theme' function. This is the default:

#+begin_example elisp
(setq doom-theme 'doom-one)
#+end_example

Here are some additional functions/macros that could help you configure Doom Emacs:

- `load!' for loading external *.el files relative to this one

- `use-package!' for configuring packages

- `after!' for running code after a package has loaded

- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.

- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

Place your private configuration here! Remember, you do not need to run 'doom sync' after modifying this file!

Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.

#+begin_example elisp
(setq user-full-name "John Doe"
      user-mail-address "example@donut.arpa")
#+end_example

** config

*** private configuration

#+begin_example elisp
(setq user-full-name "Chu the Pup"
      user-mail-address "chufilthymutt@gmail.com")
#+end_example

*** abbrev mode

#+begin_src elisp
(add-hook! org-mode :append
           #'abbrev-mode)
#+end_src

*** dictionary

#+begin_src elisp
(setq ispell-alternate-dictionary "/usr/share/dict")
#+end_src

*** vale

#+begin_src elisp
(add-hook! 'text-mode #'flymake-vale-load)
(add-hook! 'latex-mode-hook #'flymake-vale-load)
(add-hook! 'org-mode #'flymake-vale-load)
(add-hook! 'markdown-mode #'flymake-vale-load)
(add-hook! 'message-mode #'flymake-vale-load)
(use-package! flymake-vale
  :config
  (setq flymake-vale-program "/usr/bin/vale"))
#+end_src

*** palimpsest prog mode hook

#+begin_src elisp
(use-package! palimpsest-mode
  :hook (prog-mode . palimpsest-mode))
#+end_src

*** vulpea autosync org roam todos from dailies

#+begin_src elisp
(use-package! vulpea
  :hook ((org-roam-db-autosync-mode . vulpea-db-autosync-enable)))
#+end_src

*** auth source save behavior

#+begin_src elisp
(setq auth-source-save-behavior nil)
#+end_src

*** EMMS

#+begin_src elisp
(setq emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
#+end_src

#+begin_src elisp
(setq emms-source-file-default-directory "~/Music/")
#+end_src

*** IRC (ERC)

Set user information.

#+begin_example elisp :results none
(setq erc-server "localhost"
      erc-nick "chuthepup"
      erc-user-full-name "Chu the Pup")
#+end_example

*** Dired director editor (Emacs file manager) settings :dired:

Have Dired ask to back files up prior to overwriting them.

Make sure you know where your Emacs cache backup directory actually resides before putting this in your init.

#+begin_src elisp
(setq dired-backup-overwrite t)
#+end_src

*** Trash instead of delete :dired:
#+begin_src elisp
(setq delete-by-moving-to-trash t)
#+end_src

*** Org-Mode

**** Org latex fragment temporary fix :fix:bug:

#+begin_src elisp
(setq warning-suppress-types (append warning-suppress-types '((org-element-cache))))
#+end_src

**** Org Babel Auto-Tangle

For the package org-babel-auto-tangle (see packages.org).

#+begin_src elisp
(add-hook 'org-mode-hook 'org-auto-tangle-mode)
#+end_src

**** Hook load fragtog

#+begin_src elisp
(add-hook 'org-mode-hook 'org-fragtog-mode)
#+end_src

**** Custom org-todo-keywords

#+begin_src elisp
(setq org-todo-keywords
       '((sequence "TODO(t)" "PROJ(p)" "LOOP(r)" "STRT(s)" "WAIT(w)" "HOLD(h)" "HABIT(H)" "IDEA(i)" "|" "DONE(d)" "KILL(k)")
         (sequence "[ ](T)" "[-](S)" "[?](W)" "|" "[X](D)")
         (sequence "|" "OKAY(o)" "YES(y)" "NO(n)")))
#+end_src

**** Make Org mode look nicer

#+begin_example elisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-pretty-entities t)
#+end_example

**** Ensure blank lines between headings and before contents

Ensure that blank lines exist between headings and between headings and their contents.  With prefix, operate on whole buffer.  Ensures that blank lines exist after each headings's drawers.

For those who prefer to maintain blank lines between headings, this makes it easy to automatically add them where necessary, to a subtree or the whole buffer.  It also adds blank lines after drawers.  Works well with [[*~org-return-dwim~]].

#+BEGIN_SRC elisp
  ;;;###autoload
  (defun unpackaged/org-fix-blank-lines (&optional prefix)
    "Ensure that blank lines exist between headings and between headings and their contents.
  With prefix, operate on whole buffer. Ensures that blank lines
  exist after each headings's drawers."
    (interactive "P")
    (org-map-entries (lambda ()
                       (org-with-wide-buffer
                        ;; `org-map-entries' narrows the buffer, which prevents us from seeing
                        ;; newlines before the current heading, so we do this part widened.
                        (while (not (looking-back "\n\n" nil))
                          ;; Insert blank lines before heading.
                          (insert "\n")))
                       (let ((end (org-entry-end-position)))
                         ;; Insert blank lines before entry content
                         (forward-line)
                         (while (and (org-at-planning-p)
                                     (< (point) (point-max)))
                           ;; Skip planning lines
                           (forward-line))
                         (while (re-search-forward org-drawer-regexp end t)
                           ;; Skip drawers. You might think that `org-at-drawer-p' would suffice, but
                           ;; for some reason it doesn't work correctly when operating on hidden text.
                           ;; This works, taken from `org-agenda-get-some-entry-text'.
                           (re-search-forward "^[ \t]*:END:.*\n?" end t)
                           (goto-char (match-end 0)))
                         (unless (or (= (point) (point-max))
                                     (org-at-heading-p)
                                     (looking-at-p "\n"))
                           (insert "\n"))))
                     t (if prefix
                           nil
                         'tree)))
#+END_SRC

by [[https://github.com/alphapapa/unpackaged.el#ensure-blank-lines-between-headings-and-before-contents][Alphapapa]]

**** Custom org capture templates

Disabled for now. Sat Nov 19 16:39:54 2022

#+begin_example
(with-eval-after-load 'org
  (setq org-capture-templates
        '(("t" "Personal todo" entry
          (file+headline +org-capture-todo-file "Inbox")
          "* [ ] %?\n%i\n%a" :prepend t)
         ("n" "Personal notes" entry
          (file+headline +org-capture-notes-file "Inbox")
          "* %u %?\n%i\n%a" :prepend t)
         ("j" "Journal" entry
          (file+olp+datetree +org-capture-journal-file)
          "* %U %?\n%i\n%a" :prepend t)
         ("p" "Templates for projects")
         ("pt" "Project-local todo" entry
          (file+headline +org-capture-project-todo-file "Inbox")
          "* TODO %?\n%i\n%a" :prepend t)
         ("pn" "Project-local notes" entry
          (file+headline +org-capture-project-notes-file "Inbox")
          "* %U %?\n%i\n%a" :prepend t)
         ("pc" "Project-local changelog" entry
          (file+headline +org-capture-project-changelog-file "Unreleased")
          "* %U %?\n%i\n%a" :prepend t)
         ("o" "Centralized templates for projects")
         ("ot" "Project todo" entry
          #'+org-capture-central-project-todo-file
          "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
         ("on" "Project notes" entry
          #'+org-capture-central-project-notes-file
          "* %U %?\n %i\n %a" :prepend t :heading "Notes")
         ("oc" "Project changelog" entry
          #'+org-capture-central-project-changelog-file
          "* %U %?\n %i\n %a" :prepend t :heading "Changelog")
         ("b" "(web) Bookmark" plain
          (file+headline +org-capture-bookmarks-file "Inbox")
          "*** %?%i%a" :prepend t))))
#+end_example

**** Custom org directories and files :org:

If you use `org' and don't want your org files in the default location below, change `org-directory'. It must be set before org loads!

***** Custom org root directory :org:

The following will vary, so change it to be whatever your org root directory is/what you want it to be.

I use a directory that I sync between computers with a nextcloud server I run but you don't necessarily have to do that.

#+begin_src elisp
(with-eval-after-load 'org
  (setq org-directory
        (concat
         (getenv "HOME")
        "/nextcloud/documents/org/")))
#+end_src

***** Custom org bookmark directory :org:

The following will vary, so change it to be whatever your bookmarks file is/what you want it to be.

I use a document that I track with org roam but you don't necessarily have to do that.

#+begin_src elisp
(with-eval-after-load 'org
  (setq +org-capture-bookmarks-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004090130-bookmarks.org")))
#+end_src

***** Custom org agenda files :org:

#+begin_example elisp
(setq org-agenda-files
      '("/home/chu/nextcloud/documents/org/roam/20220726210347-important_dates.org"
        "/home/chu/nextcloud/documents/org/roam/20221004221831-todo.org"
        "/home/chu/nextcloud/documents/org/roam/20220823133456-precalculus_algebra.org"
        "/home/chu/nextcloud/documents/org/roam/20220826102105-chem_1115.org"
        "/home/chu/nextcloud/documents/org/roam/20221004222241-notes.org"
        "/home/chu/nextcloud/documents/org/roam/20221004222237-journal.org"
        "/home/chu/nextcloud/documents/org/roam/20221004222234-projects.org"
        "/home/chu/nextcloud/documents/org/roam/20220822103211-engl_1030.org"
        "/home/chu/nextcloud/documents/org/roam/20221002161631-my_conlang.org"))
#+end_example

Usually, you just set these using `org-agenda-file-to-front`

***** Custom org journal file location :org:

You know the gist by now--change this to whatever you want your file to be.

#+begin_src elisp
(with-eval-after-load 'org
  (setq +org-capture-journal-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004222230-journal.org")))
#+end_src

***** Custom org notes file location :org:

#+begin_src elisp
(with-eval-after-load 'org
  (setq +org-capture-notes-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004222235-notes.org")))
#+end_src

***** Custom org projects file location :org:

#+begin_src elisp
(with-eval-after-load 'org
  (setq +org-capture-projects-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004222226-projects.org")))
#+end_src

***** Custom org todo file location :org:

I primarily use a "todo" file rather than an "agenda" file, for agenda ("TODO") items.

#+begin_src elisp
(with-eval-after-load 'org
  (setq +org-capture-todo-file
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/20221004221829-todo.org")))
#+end_src

***** Org roam v2 directories and files

#+begin_src elisp
(with-eval-after-load 'org
  (setq org-roam-directory
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/")))
#+end_src

***** Org roam v2 dailies directory

Path to daily-notes. This path is relative to org-roam-directory.

#+begin_src elisp
(setq org-roam-dailies-directory "daily/")
#+end_src

***** Org roam v2 dailies capture template

#+begin_src elisp
(setq org-roam-dailies-capture-templates
      '(("d" "default" entry
         "* %?"
         :target (file+head "%<%Y-%m-%d>.org"
                            "#+title: %<%Y-%m-%d>\n"))))
#+end_src

***** org-roam-protocol test

#+begin_src elisp
(require 'org-roam-protocol)
#+end_src

***** org-roam-export test

#+begin_src elisp
(require 'org-roam-export)
#+end_src

***** Org id custom id location

#+begin_src elisp
(setq org-id-locations-file
      (concat
       (getenv "HOME")
       "/nextcloud/documents/org/.orgids"))
#+end_src

***** Org-attach custom directory

#+begin_src elisp
(setq org-attach-id-dir
      (concat
       (getenv "HOME")
       "/nextcloud/documents/org/.attach/"))
#+end_src

***** Org-Cite (oc.el)

****** Org-Cite (oc.el) bibliography location

#+begin_src elisp
(setq! org-cite-global-bibliography
       (list
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/bib.bib")))
#+end_src

****** Org-Cite (oc.el) CiteProc formatter file directory location

Citation Style Language (CSL)

#+begin_src elisp
(setq org-cite-csl-styles-dir
      (concat
       (getenv "HOME")
       "/nextcloud/documents/org/latex/citeproc-formatters/"))
#+end_src

***** Citar bibliography location

#+begin_src elisp
(setq citar-bibliography
       (list
        (concat
         (getenv "HOME")
         "/nextcloud/documents/org/roam/bib.bib")))
#+end_src

**** Download/capture for Org mode

#+begin_src elisp
(with-eval-after-load 'org
  (require 'org-download)
  (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src

**** Org-download image width attribute tag

Added automatically when images are attached.

#+begin_src elisp
(setq org-image-actual-width 500)
#+end_src

**** LaTeX classes for org mode with org-latex-classes

Helpful when editing LaTeX documents.

#+begin_src elisp
(with-eval-after-load 'ox-latex
(add-to-list 'org-latex-classes
             '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src

**** A not-stupid way to archive sections of Org documents

By default, using the Org mode archive function 'org-archive-subtree-default' does not capture the higher-level headings a particular subheading was sitting under when it was archived, which makes a mess of the archive file that gets created. Use this instead!

***** org-archive-subtree-hierarchical example and source citation reference

#+begin_example elisp
;; org-archive-subtree-hierarchical.el
;;
;; version 0.2
;; modified from https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00109.html
;; modified from https://stackoverflow.com/a/35475878/259187
;; In orgmode
;; * A
;; ** AA
;; *** AAA
;; ** AB
;; *** ABA
;; Archiving AA will remove the subtree from the original file and create
;; it like that in archive target:
;; * AA
;; ** AAA
;; And this give you
;; * A
;; ** AA
;; *** AAA
;;
;; Install file to your include path and include in your init file with:
;;
;;  (require 'org-archive-subtree-hierarchical)
;;  (setq org-archive-default-command 'org-archive-subtree-hierarchical)
;;
#+end_example

***** org-archive-subtree-hierarchical code

#+begin_src elisp
(provide 'org-archive-subtree-hierarchical)
(require 'org-archive)
(defun org-archive-subtree-hierarchical--line-content-as-string ()
  "Returns the content of the current line as a string"
  (save-excursion
    (beginning-of-line)
    (buffer-substring-no-properties
     (line-beginning-position) (line-end-position))))
(defun org-archive-subtree-hierarchical--org-child-list ()
  "This function returns all children of a heading as a list. "
  (interactive)
  (save-excursion
    ;; this only works with org-version > 8.0, since in previous
    ;; org-mode versions the function (org-outline-level) returns
    ;; gargabe when the point is not on a heading.
    (if (= (org-outline-level) 0)
        (outline-next-visible-heading 1)
      (org-goto-first-child))
    (let ((child-list (list (org-archive-subtree-hierarchical--line-content-as-string))))
      (while (org-goto-sibling)
        (setq child-list (cons (org-archive-subtree-hierarchical--line-content-as-string) child-list)))
      child-list)))
(defun org-archive-subtree-hierarchical--org-struct-subtree ()
  "This function returns the tree structure in which a subtree belongs as a list."
  (interactive)
  (let ((archive-tree nil))
    (save-excursion
      (while (org-up-heading-safe)
        (let ((heading
               (buffer-substring-no-properties
                (line-beginning-position) (line-end-position))))
          (if (eq archive-tree nil)
              (setq archive-tree (list heading))
            (setq archive-tree (cons heading archive-tree))))))
    archive-tree))
(defun org-archive-subtree-hierarchical ()
  "This function archives a subtree hierarchical"
  (interactive)
  (let ((org-tree (org-archive-subtree-hierarchical--org-struct-subtree))
        (this-buffer (current-buffer))
        (file (abbreviate-file-name
               (or (buffer-file-name (buffer-base-buffer))
                   (error "No file associated to buffer")))))
    (save-excursion
      (setq location org-archive-location
            afile (car (org-archive--compute-location
                        (or (org-entry-get nil "ARCHIVE" 'inherit) location)))
            ;; heading (org-extract-archive-heading location)
            infile-p (equal file (abbreviate-file-name (or afile ""))))
      (unless afile
        (error "Invalid `org-archive-location'"))
      (if (> (length afile) 0)
          (setq newfile-p (not (file-exists-p afile))
                visiting (find-buffer-visiting afile)
                buffer (or visiting (find-file-noselect afile)))
        (setq buffer (current-buffer)))
      (unless buffer
        (error "Cannot access file \"%s\"" afile))
      (org-cut-subtree)
      (set-buffer buffer)
      (org-mode)
      (goto-char (point-min))
      (while (not (equal org-tree nil))
        (let ((child-list (org-archive-subtree-hierarchical--org-child-list)))
          (if (member (car org-tree) child-list)
              (progn
                (search-forward (car org-tree) nil t)
                (setq org-tree (cdr org-tree)))
            (progn
              (goto-char (point-max))
              (newline)
              (org-insert-struct org-tree)
              (setq org-tree nil)))))
      (newline)
      (org-yank)
      (when (not (eq this-buffer buffer))
        (save-buffer))
      (message "Subtree archived %s"
               (concat "in file: " (abbreviate-file-name afile))))))
(defun org-insert-struct (struct)
  "TODO"
  (interactive)
  (when struct
    (insert (car struct))
    (newline)
    (org-insert-struct (cdr struct))))
(defun org-archive-subtree ()
  (org-archive-subtree-hierarchical))
#+end_src

***** Change the default Org archive function to be the not-stupid one

#+begin_src elisp
(setq org-archive-default-command 'org-archive-subtree-hierarchical)
#+end_src

**** Custom Org Agenda files

Subject to change as projects roll in and out of my purview.

#+begin_src elisp
(with-eval-after-load 'org
  (setq org-agenda-files '("~/nextcloud/documents/org/roam/20221004221829-todo.org"
                           "~/nextcloud/documents/org/roam/20220823133453-precalculus_algebra.org"
                           "~/nextcloud/documents/org/roam/20220826102101-chem_1110.org"
                           "~/nextcloud/documents/org/roam/20220726210346-important_dates.org"
                           "~/nextcloud/documents/org/roam/20221004222235-notes.org"
                           "~/nextcloud/documents/org/roam/20221004222230-journal.org"
                           "~/nextcloud/documents/org/roam/20221004222226-projects.org"
                           "~/nextcloud/documents/org/roam/20220822103202-engl_1020.org"
                           "~/nextcloud/documents/org/roam/20221002161620-my_conlang.org")))
#+end_src

**** habits

#+begin_src elisp
(require 'org-habit)
#+end_src

*** Visual Changes

**** Font

I like the look of Doom Emacs, so I keep this as default.

#+name: defaults
#+begin_example
(setq doom-font (font-spec :family "Fira Mono" :size 12))
#+end_example

#+begin_src elisp
(setq doom-font (font-spec :size 12))
#+end_src

**** Alpha background tranparency function :function:

Requires a compositor.

#+begin_example elisp :results none
(defun kb/toggle-window-transparency ()
  "Toggle transparency."
  (interactive)
  (let ((alpha-transparency 75))
    (pcase (frame-parameter nil 'alpha-background)
      (alpha-transparency (set-frame-parameter nil 'alpha-background 100))
      (t (set-frame-parameter nil 'alpha-background alpha-transparency)))))
#+end_example

[[https://kristofferbalintona.me/posts/202206071000/][True Emacs Transparency | Kristoffer Balintona]]

#+begin_example elisp :results none
(defun toggle-transparency ()
  "Toggle transparency."
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (if (eq
     (if (numberp alpha)
         alpha
       (cdr alpha)) ; may also be nil
     100)
    (set-frame-parameter nil 'alpha '(85 . 50))
      (set-frame-parameter nil 'alpha '(100 . 100)))))
#+end_example

#+begin_example elisp :results none
(defun toggle-background-transparency ()
  "Toggle background transparency."
  (interactive)
  (if (get 'toggle-background-transparency 'state)
      (progn
        (set-frame-parameter nil 'alpha-background 100)
        (put 'toggle-background-transparency 'state nil))
    (progn
      (set-frame-parameter nil 'alpha-background 35)
      (put 'toggle-background-transparency 'state t))))
#+end_example

**** Temporarily convert images that Emacs cannot otherwise display

This will Set Emacs to convert images if they are going to be shown in the GUI. It detects when Emacs is unable to display the image due to lack of compatibility and temporarily converts it, pushing the converted version into memory during display (it gets cleaned up by the garbage collector).

Note: This is a soft dependency of random-splash-image; in turn, you risk being unable to display certain image file types (notably .webp files) if this is disabled.

#+begin_src elisp
(setq image-use-external-converter t)
#+end_src

**** Random Splash Images

***** Enable random-splash-image

For the plugin 'random-splash-image' which displays a random splash image on each Emacs startup.

#+begin_src elisp
(require 'random-splash-image)
#+end_src

***** Tell random-splash-image what directory to look for images in.

#+begin_example elisp
(setq random-splash-image-dir
      (concat
       (getenv "HOME") "/.local/share/random-splash-image-dir/konsticlub/src/"))
#+end_example

I use a more specific one at the moment.

#+begin_src elisp
(setq random-splash-image-dir
      (concat
       (getenv "HOME") "/.local/share/random-splash-image-dir/chosen-splash-images/src/"))
#+end_src

***** TODO How to set multiple directories for random-splash-image

I don't know how to do this yet.

**** Set a random splash image on Emacs startup

#+begin_src elisp
(with-eval-after-load 'random-splash-image
  (random-splash-image-set))
#+end_src

**** Display line number styling

This determines the style of line numbers in effect. If set to `nil', line numbers are disabled. For relative line numbers, set this to `relative'.

Disabled since Doom is handling this okay now without it.

#+begin_example elisp
(setq display-line-numbers t)
#+end_example

*** ripgrep "rg" fast search to handle projectile project files

Use the faster searcher to handle project files: ripgrep "rg"

#+begin_src elisp
(when (and (not (executable-find "fd"))
           (executable-find "rg"))
  (setq projectile-generic-command
        (let ((rg-cmd ""))
          (dolist (dir projectile-globally-ignored-directories)
            (setq rg-cmd (format "%s --glob '!%s'" rg-cmd dir)))
          (setq rg-ignorefile
                (concat "--ignore-file" " "
                        (expand-file-name "rg_ignore" user-emacs-directory)))
          (concat "rg -0 --files --color=never --hidden" rg-cmd " " rg-ignorefile))))
#+end_src

*** Enable active presence on Discord for Emacs

*Note:* This will tell anyone on your Discord your current activity status in Emacs—with a pretty hefty amount of detail as well. If you feel like this violates your sense of privacy, either keep it wrapped with

#+begin_quote
#+begin_example
...
#+end_example
#+end_quote

or just delete it entirely.

#+begin_src elisp
(elcord-mode)
#+end_src

*** EPG: Letting Emacs query for GPG passwords

Allow Emacs to handle queries for gpg passwords.

Disabled for now.

#+begin_example elisp
(setf epg-pinentry-mode 'loopback)
(defun pinentry-emacs (desc prompt ok error)
  (let ((str (read-passwd
              (concat (replace-regexp-in-string "%22" "\""
                      (replace-regexp-in-string "%0A" "\n" desc)) prompt ": ")))) str))
#+end_example

*** Tramp FTP doesn't read my ~/.authinfo.gpg

Ange-FTP defaults to =~/.netrc=  so you need to add this to your init script:

#+begin_src elisp
(setq ange-ftp-netrc-filename "~/.authinfo.gpg")
#+end_src

*** Periodic saving of recent files list (recentf):

Might be broken, disabling for now.

#+begin_example elisp
(run-at-time nil (* 5 60) 'recentf-save-list)
#+end_example

*** Ledger

**** Ledger file location defaults

#+begin_example elisp
(setq ledger-schedule-file "~/nextcloud/documents/ledger/ledger-schedule.ledger")
#+end_example

*** Achievements in Emacs

#+begin_src elisp
(achievements-mode)
#+end_src

*** Grammarly support in flycheck

#+begin_example elisp
(with-eval-after-load 'flycheck
  (flycheck-grammarly-setup))
#+end_example

*** Round numbers to N decimals in Elisp

from [[https://gergely.polonkai.eu/blog/2014/10/7/rounding-numbers-to-n-decimals-in-emacs.html][Rounding numbers to N decimals in Emacs]] by Gergely Polonkai

#+begin_src elisp
(defun get-number-at-point ()
  (interactive)
  (skip-chars-backward "0123456789.-")
  (or (looking-at "[0123456789.-]+")
      (error "No number at point"))
  (string-to-number (match-string 0)))

(defun round-number-at-point-to-decimals (decimal-count)
  (interactive "NDecimal count: ")
  (let ((mult (expt 10 decimal-count)))
    (replace-match (number-to-string
              (/
               (fround
                (*
                 mult
                 (get-number-at-point)))
                mult)))))
#+end_src

*** Firefox fixes

#+begin_src elisp
;; (setq browse-url-firefox-program "/usr/bin/firefox")
;; (setq browse-url-firefox-arguments "-no-remote")
;; (setq browse-url-firefox-new-window-is-tab t)
;; (setq browse-url-generic-program "/usr/bin/firefox")
;; (setq browse-url-browser-function 'browse-url-generic)
#+end_src

*** File templates conflict with org-capture templates with type entry #4271 fix
#+begin_example elisp
(set-file-template! 'org-mode :ignore t)
#+end_example

*** Fix alpha transparency issues

Sometimes Emacs has issues with transparency. In my case, it goes unusably transparent if I make use of an Xresources file.

You can specify frames to use different levels of transparency depending on whether or not you have Emacs focused (active) or if you've clicked off to another application (inactive).

#+begin_example elisp
(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
#+end_example

Or you can just use one number, as so:

#+begin_example elisp
(set-frame-parameter (selected-frame) 'alpha <both>)
#+end_example

Here's the settings I currently use:

#+begin_example elisp
(set-frame-parameter (selected-frame) 'alpha 100) ; set this frame
(add-to-list 'default-frame-alist '(alpha 100)) ; set all frames from this point on
(setq inhibit-x-resources t) ; inhibit .xresources file from being loaded on emacs init
(set-frame-parameter nil 'alpha-background 100) ; For current frame
(add-to-list 'default-frame-alist '(alpha-background . 100)) ; For all new frames henceforth
#+end_example

from [[https://www.emacswiki.org/emacs/TransparentEmacs][EmacsWiki: Transparent Emacs]]

*** Literate Calc mode

#+begin_src elisp
(use-package! literate-calc-mode
  :defer t)
#+end_src

#+RESULTS:
: literate-calc-mode

*** common lisp find file fix for roswell compatibility :lisp:

#+begin_src elisp
(defun +lisp/find-file-in-quicklisp ()
  "Find a file belonging to a library downloaded by Quicklisp."
  (interactive)
  (doom-project-find-file "~/.local/share/roswell/lisp/quicklisp/dists"))
#+end_src

*** roswell lisp sly helper :lisp:

#+begin_src elisp
(load! (expand-file-name "~/.local/share/roswell/helper.el"))
(setq inferior-lisp-program "ros -Q run")
#+end_src

*** common lisp snippets for yasnippets (require)

#+begin_src elisp
(require 'common-lisp-snippets)
#+end_src

* Works Cited

** [[https://gergely.polonkai.eu/blog/2014/10/7/rounding-numbers-to-n-decimals-in-emacs.html][Rounding numbers to N decimals in Emacs]] by Gergely Polonkai

** https://blog.lazkani.io/posts/bookmark-with-org-capture/

** https://orgmode.org/manual/Capture-templates.html

** [[https://raw.githubusercontent.com/gilbertw1/emacs-literate-starter/master/emacs.org][DOOM Emacs Literate Config]]

By Gilbert. Thanks, Gilbert.

** [[https://github.com/alphapapa/unpackaged.el#ensure-blank-lines-between-headings-and-before-contents][alphapapa/unpackaged.el: A collection of useful Emacs Lisp code that isn't substantial enough to be packaged]]

This is where the 'unpackaged/org-fix-blank-lines' function was sourced from.

By alphapapa. Thanks, alphapapa.

** [[https://stackoverflow.com/a/35475878/259187][org-archive-subtree-hierarchical.el v0.2]]

By [[https://gist.github.com/kepi/2f4acc3cc93403c75fbba5684c5d852d][Kepi]]. Thanks, Kepi.

*** [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00109.html][org-archive-subtree-hierarchical.el v0.1]]

By [[https://lists.gnu.org/archive/html/emacs-orgmode/2014-08/msg00109.html][Florian Adamsky]]. Thanks, Florian Adamsky.
